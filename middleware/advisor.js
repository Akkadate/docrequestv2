// ===============================================
// Advisor Authentication & Authorization Middleware
// ===============================================
// ‡πÑ‡∏ü‡∏•‡πå: middleware/advisor.js
// ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: 30 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2025
// ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤

const jwt = require('jsonwebtoken');
require('dotenv').config();

/**
 * Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
const isAdvisor = async (req, res, next) => {
  try {
    console.log('üîç Checking advisor role for user:', req.user?.id);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user object ‡∏à‡∏≤‡∏Å authenticateJWT middleware ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.user) {
      console.log('‚ùå No user object found in request');
      return res.status(401).json({ 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
        error: 'USER_NOT_AUTHENTICATED' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const userRole = req.user.role;
    console.log('üë§ User role:', userRole);

    // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á advisor ‡πÑ‡∏î‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö)
    if (userRole === 'admin') {
      console.log('‚úÖ Admin access granted to advisor functions');
      req.advisorAccess = {
        type: 'admin',
        canAccessAll: true,
        facultyId: null
      };
      return next();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô advisor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (userRole !== 'advisor' && !req.user.is_advisor) {
      console.log('‚ùå User is not an advisor, role:', userRole, 'is_advisor:', req.user.is_advisor);
      return res.status(403).json({ 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤',
        error: 'ADVISOR_ACCESS_DENIED' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const pool = req.app.locals.pool || req.pool;
    if (!pool) {
      console.error('‚ùå Database pool not available');
      return res.status(500).json({ 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        error: 'DB_POOL_NOT_AVAILABLE' 
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
    const advisorQuery = `
      SELECT 
        fa.id as advisor_id,
        fa.faculty_id,
        fa.advisor_name,
        fa.advisor_email,
        fa.is_active,
        f.name_th as faculty_name_th,
        f.name_en as faculty_name_en,
        u.id as user_id,
        u.full_name,
        u.email
      FROM faculty_advisors fa
      JOIN faculties f ON fa.faculty_id = f.id
      LEFT JOIN users u ON (u.email = fa.advisor_email AND u.is_advisor = true)
      WHERE fa.advisor_email = $1 AND fa.is_active = true
    `;

    const advisorResult = await pool.query(advisorQuery, [req.user.email]);
    console.log('üîç Advisor query result:', advisorResult.rows.length, 'records found');

    if (advisorResult.rows.length === 0) {
      console.log('‚ùå Advisor not found in faculty_advisors table for email:', req.user.email);
      return res.status(403).json({ 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        error: 'ADVISOR_NOT_FOUND' 
      });
    }

    const advisorData = advisorResult.rows[0];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (!advisorData.is_active) {
      console.log('‚ùå Advisor account is inactive');
      return res.status(403).json({ 
        message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        error: 'ADVISOR_ACCOUNT_INACTIVE' 
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô request object
    req.advisorAccess = {
      type: 'advisor',
      canAccessAll: false,
      advisorId: advisorData.advisor_id,
      facultyId: advisorData.faculty_id,
      facultyName: {
        th: advisorData.faculty_name_th,
        en: advisorData.faculty_name_en
      },
      advisorName: advisorData.advisor_name,
      advisorEmail: advisorData.advisor_email
    };

    console.log('‚úÖ Advisor access granted for faculty:', advisorData.faculty_name_th);
    next();

  } catch (error) {
    console.error('‚ùå Error in isAdvisor middleware:', error);
    res.status(500).json({ 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå',
      error: 'ADVISOR_AUTH_ERROR' 
    });
  }
};

/**
 * Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object  
 * @param {Function} next - Express next function
 */
const canAccessApprovalRequest = async (req, res, next) => {
  try {
    const { approval_id, request_id } = req.params;
    const requestId = approval_id || request_id;

    if (!requestId) {
      return res.status(400).json({ 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        error: 'MISSING_REQUEST_ID' 
      });
    }

    // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (req.advisorAccess?.type === 'admin') {
      console.log('‚úÖ Admin can access all approval requests');
      return next();
    }

    const pool = req.app.locals.pool || req.pool;
    if (!pool) {
      return res.status(500).json({ 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        error: 'DB_POOL_NOT_AVAILABLE' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const accessQuery = `
      SELECT 
        ar.id,
        ar.faculty_id,
        ar.advisor_id,
        ar.approval_status,
        u.full_name as student_name,
        u.student_id,
        f.name_th as faculty_name
      FROM approval_requests ar
      JOIN users u ON ar.student_id = u.id
      JOIN faculties f ON ar.faculty_id = f.id
      WHERE ar.id = $1
    `;

    const result = await pool.query(accessQuery, [requestId]);

    if (result.rows.length === 0) {
      console.log('‚ùå Approval request not found:', requestId);
      return res.status(404).json({ 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        error: 'APPROVAL_REQUEST_NOT_FOUND' 
      });
    }

    const requestData = result.rows[0];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (requestData.faculty_id !== req.advisorAccess.facultyId) {
      console.log('‚ùå Advisor cannot access request from different faculty');
      console.log('Request faculty ID:', requestData.faculty_id);
      console.log('Advisor faculty ID:', req.advisorAccess.facultyId);
      
      return res.status(403).json({ 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏≠‡∏∑‡πà‡∏ô',
        error: 'CROSS_FACULTY_ACCESS_DENIED' 
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô request object
    req.approvalRequestData = requestData;

    console.log('‚úÖ Advisor can access approval request:', requestId);
    next();

  } catch (error) {
    console.error('‚ùå Error in canAccessApprovalRequest middleware:', error);
    res.status(500).json({ 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      error: 'ACCESS_CHECK_ERROR' 
    });
  }
};

/**
 * Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
const canModifyApprovalRequest = (req, res, next) => {
  try {
    // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
    if (req.advisorAccess?.type === 'admin') {
      console.log('‚úÖ Admin can modify any approval request');
      return next();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const requestData = req.approvalRequestData;
    if (!requestData) {
      return res.status(400).json({ 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        error: 'APPROVAL_REQUEST_DATA_MISSING' 
      });
    }

    const currentStatus = requestData.approval_status;
    const modifiableStatuses = ['waiting_approval'];

    if (!modifiableStatuses.includes(currentStatus)) {
      console.log('‚ùå Cannot modify approval request with status:', currentStatus);
      return res.status(400).json({ 
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${currentStatus}" ‡πÑ‡∏î‡πâ`,
        error: 'APPROVAL_REQUEST_NOT_MODIFIABLE',
        currentStatus: currentStatus
      });
    }

    console.log('‚úÖ Approval request can be modified');
    next();

  } catch (error) {
    console.error('‚ùå Error in canModifyApprovalRequest middleware:', error);
    res.status(500).json({ 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
      error: 'MODIFY_CHECK_ERROR' 
    });
  }
};

/**
 * Middleware ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Pool ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö request (helper)
 * @param {Object} pool - Database pool
 */
const addPoolToRequest = (pool) => {
  return (req, res, next) => {
    req.pool = pool;
    req.app.locals.pool = pool;
    next();
  };
};

/**
 * Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á advisor
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
const logAdvisorAccess = (req, res, next) => {
  if (req.advisorAccess) {
    console.log(`üìù Advisor Access Log:`, {
      timestamp: new Date().toISOString(),
      advisorEmail: req.advisorAccess.advisorEmail,
      facultyId: req.advisorAccess.facultyId,
      action: `${req.method} ${req.originalUrl}`,
      userAgent: req.get('User-Agent'),
      ip: req.ip || req.connection.remoteAddress
    });
  }
  next();
};

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô advisor ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {Object} pool - Database pool
 * @param {string} userEmail - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} facultyId - ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
 * @returns {Promise<boolean>} - true ‡∏´‡∏≤‡∏Å user ‡πÄ‡∏õ‡πá‡∏ô advisor ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏±‡πâ‡∏ô
 */
const isAdvisorOfFaculty = async (pool, userEmail, facultyId) => {
  try {
    const query = `
      SELECT id FROM faculty_advisors 
      WHERE advisor_email = $1 AND faculty_id = $2 AND is_active = true
    `;
    const result = await pool.query(query, [userEmail, facultyId]);
    return result.rows.length > 0;
  } catch (error) {
    console.error('Error checking advisor faculty:', error);
    return false;
  }
};

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 * @param {Object} pool - Database pool
 * @param {string} advisorEmail - ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
 * @returns {Promise<Object|null>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠ null
 */
const getAdvisorByEmail = async (pool, advisorEmail) => {
  try {
    const query = `
      SELECT 
        fa.*,
        f.name_th as faculty_name_th,
        f.name_en as faculty_name_en
      FROM faculty_advisors fa
      JOIN faculties f ON fa.faculty_id = f.id
      WHERE fa.advisor_email = $1 AND fa.is_active = true
    `;
    const result = await pool.query(query, [advisorEmail]);
    return result.rows[0] || null;
  } catch (error) {
    console.error('Error getting advisor by email:', error);
    return null;
  }
};

/**
 * Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next function
 */
const getAdvisorApprovalRequests = async (req, res, next) => {
  try {
    const pool = req.app.locals.pool || req.pool;
    
    // Admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (req.advisorAccess?.type === 'admin') {
      req.advisorRequests = { canViewAll: true, facultyFilter: null };
      return next();
    }

    // Advisor ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    req.advisorRequests = { 
      canViewAll: false, 
      facultyFilter: req.advisorAccess.facultyId 
    };
    
    next();

  } catch (error) {
    console.error('‚ùå Error in getAdvisorApprovalRequests middleware:', error);
    res.status(500).json({ 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
      error: 'GET_REQUESTS_ERROR' 
    });
  }
};

module.exports = {
  isAdvisor,
  canAccessApprovalRequest,
  canModifyApprovalRequest,
  addPoolToRequest,
  logAdvisorAccess,
  getAdvisorApprovalRequests,
  
  // Helper functions
  isAdvisorOfFaculty,
  getAdvisorByEmail
};
